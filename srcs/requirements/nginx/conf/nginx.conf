
server {
  listen 443 ssl;
  listen [::]:443 ssl;
  server_name imimouni.42.fr;
  # server_name localhost;

  ssl_protocols TLSv1.3;
  ssl_certificate /etc/nginx/ssl/cert.crt;
  ssl_certificate_key /etc/nginx/ssl/cert.key;

  root /var/www/html/;
  index index.php index.html index.htm index.nginx-debian.html;

  location / {
    try_files $uri $uri/ /index.php?$args;
  }
  
  location ~ \.php$ {
    try_files $uri =404;
    fastcgi_pass wordpress:9000;  
    # fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    # include fastcgi_params;
  }
}

# listen 443 ssl; and listen [::]:443 ssl;: These lines specify that this server block will listen on port 443 for HTTPS traffic (ssl indicates that SSL/TLS is enabled).

# server_name localhost;: This line sets the server name for this block to "localhost." It means this block will handle requests for the domain name "localhost."

# ssl_protocols TLSv1.3;: This line specifies that the server should use the TLS 1.3 protocol for secure communication.

# ssl_certificate and ssl_certificate_key: These lines specify the paths to the SSL certificate (cert.crt) and the corresponding private key (cert.key) used for HTTPS encryption. These files should be stored in the /etc/nginx/ssl/ directory.

# root /var/www/html/;: This line sets the root directory for serving web content. It means that Nginx will serve website files from the /var/www/html/ directory.

# index: These lines define the default index files that Nginx should look for when a directory is requested. It will attempt to serve these files in the specified order.

# location / { ... }: This block defines how Nginx should handle requests to the root URL ("/") and non-PHP files. It uses the try_files directive to attempt serving static files, and if none are found, it redirects the request to index.php.

# location ~ \.php$ { ... }: This block defines how Nginx should handle requests to PHP files. It uses FastCGI to pass PHP requests to a PHP-FPM server (wordpress:9000), sets the SCRIPT_FILENAME parameter for PHP, and includes the fastcgi_params.

# Overall, this server block is configured to serve a website or application located in the /var/www/html/ directory over HTTPS (port 443) using the TLS 1.3 protocol. It handles PHP files by passing them to a PHP-FPM server for processing. The SSL certificate and key files are specified to ensure secure communication.





# try_files $uri $uri/ /index.php?$args;: This directive instructs Nginx to perform a series of checks when processing requests:

# $uri: This variable represents the current URI requested by the client. Nginx first attempts to serve the requested URI as a static file.

# $uri/: This is an attempt to serve the requested URI as a directory (by adding a trailing slash). This is useful for requests like "/example/" to index files inside the directory.

# /index.php?$args: If the above attempts fail (i.e., the requested resource is not found as a static file or directory), Nginx internally redirects the request to /index.php with any query parameters ($args) intact.





# location ~ \.php$ { ... }: This location block uses a regular expression match (~ \.php$) to match any request ending with ".php."

# try_files $uri =404;: For PHP requests, Nginx immediately tries to find the requested file. If it doesn't exist, it returns a "404 Not Found" error.

# fastcgi_pass wordpress:9000;: This line specifies that Nginx should pass PHP requests to a FastCGI server named "wordpress" on port 9000. FastCGI is a protocol for interfacing web servers with dynamic applications like PHP.

# fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;: This directive sets the SCRIPT_FILENAME parameter for the FastCGI request. It specifies the full path to the PHP script that should be executed. $document_root refers to the root directory defined earlier in the server block, and $fastcgi_script_name is the path to the requested PHP script.

# include fastcgi_params;: This line includes a set of FastCGI parameters defined in the fastcgi_params file. These parameters are used to configure the FastCGI request, such as passing query parameters, cookies, and other information to the PHP script.